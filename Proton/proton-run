#!/usr/bin/env bash
# ----------------------------------------------------------------------------
# Proton-Run: A modular tool for executing Windows programs using Proton
# without Steam integration.
#
# This script provides a flexible way to run Windows executables in isolated
# Proton prefixes, with support for custom versions, debugging, and dependency
# installation via Winetricks. It is designed for modularity, making it easy
# to extend for tasks like reverse engineering or binary analysis.
#
# Author: flipflopsen
# License: MIT 
# Updated  : 2025-07-14
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Configuration Section
# Customize default paths and settings here
# ----------------------------------------------------------------------------

# Default directories (override via environment variables if needed)
DEFAULT_COMMON_COMPATDATA="$HOME/Games/Proton-Data"
DEFAULT_PROTON_TOOLS_DIR="$HOME/.local/share/Steam/compatibilitytools.d"
DEFAULT_PROTON_OFFICIAL_DIR="$HOME/.local/share/Steam/steamapps/common"
DEFAULT_STEAM_DIR="$HOME/.local/share/Steam"
DEFAULT_PROTON_VERSION="GE-Proton9-23"  # e.g., "Proton - Experimental" or "GE-Proton10-9"

# Color codes for console output (can be disabled by setting NO_COLOR=1)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'  # No Color

# ----------------------------------------------------------------------------
# Utility Functions
# ----------------------------------------------------------------------------

# Display help message with usage instructions
print_help() {
    cat << EOF
Proton-Run: Execute Windows programs with Proton (Steam-less)

Usage: $0 [OPTIONS] <executable> [args...]

Options:
  -v, --version <VER>        Specify Proton version (default: $DEFAULT_PROTON_VERSION)
  -l, --list-versions        List available Proton versions
  -d, --debug                Enable verbose debugging and logging
  -i, --install-deps <DEPS>  Install dependencies via Winetricks (e.g., "vcrun2019 dxvk")
  -h, --help                 Display this help message

Environment Variables:
  COMMON_COMPATDATA          Common prefix directory (default: $DEFAULT_COMMON_COMPATDATA)
  PROTON_TOOLS_DIR           Proton tools directory (GE-Proton) (default: $DEFAULT_PROTON_TOOLS_DIR)
  PROTON_OFFICIAL_DIR        Official Proton directory (default: $DEFAULT_PROTON_OFFICIAL_DIR)
  STEAM_DIR                  Steam directory (default: $DEFAULT_STEAM_DIR)
  PROTON_VERSION             Default Proton version (default: $DEFAULT_PROTON_VERSION)

Examples:
  $0 setup.exe                              # Run with default settings
  $0 -v "GE-Proton10-9" game.exe            # Use specific version
  $0 -i "vcrun2019" -d app.exe              # Install deps, enable debug, then run
EOF
}

# List available Proton versions from configured directories
list_proton_versions() {
    local dirs=("${PROTON_TOOLS_DIR}" "${PROTON_OFFICIAL_DIR}")
    local count=0

    echo "Available Proton versions:"

    for dir_path in "${dirs[@]}"; do
        if [[ -d "${dir_path}" ]]; then
            echo "From ${dir_path}:"
            while IFS= read -r -d '' version; do
                if [[ -f "${version}/proton" && -x "${version}/proton" ]]; then
                    local sanitized
                    sanitized=$(basename "${version}" | tr ' ' '-')
                    echo "  - $(basename "${version}") (subdir: ${sanitized})"
                    ((count++))
                fi
            done < <(find "${dir_path}" -maxdepth 1 -type d \( -name "Proton*" -o -name "GE-Proton*" \) -print0)
        else
            echo "  Directory ${dir_path} does not exist"
        fi
    done

    if [[ ${count} -eq 0 ]]; then
        echo "  No Proton versions found"
    fi
}

# Locate the Proton installation path based on version
find_proton_path() {
    local version="${1}"
    local proton_path=""
    local dirs=("${PROTON_TOOLS_DIR}" "${PROTON_OFFICIAL_DIR}")

    if [[ -n "${version}" ]]; then
        for dir_path in "${dirs[@]}"; do
            local candidate="${dir_path}/${version}"
            if [[ -d "${candidate}" && -f "${candidate}/proton" && -x "${candidate}/proton" ]]; then
                proton_path="${candidate}"
                break
            fi
        done
        if [[ -z "${proton_path}" ]]; then
            echo -e "${RED}Error: Proton version '${version}' not found${NC}" >&2
            return 1
        fi
    else
        # Fallback to default logic (prioritize configured, then Experimental, GE, etc.)
        proton_path=$(find_proton_path "${PROTON_VERSION}")
        if [[ $? -eq 0 ]]; then return 0; fi

        for dir_path in "${dirs[@]}"; do
            local candidate="${dir_path}/Proton - Experimental"
            if [[ -d "${candidate}" && -f "${candidate}/proton" && -x "${candidate}/proton" ]]; then
                proton_path="${candidate}"
                break
            fi
        done

        if [[ -z "${proton_path}" ]]; then
            for dir_path in "${dirs[@]}"; do
                for candidate in $(find "${dir_path}" -maxdepth 1 -type d -name "GE-Proton*" | sort -r); do
                    if [[ -d "${candidate}" && -f "${candidate}/proton" && -x "${candidate}/proton" ]]; then
                        proton_path="${candidate}"
                        return 0
                    fi
                done
            done
        fi

        if [[ -z "${proton_path}" ]]; then
            for dir_path in "${dirs[@]}"; do
                for candidate in $(find "${dir_path}" -maxdepth 1 -type d -name "Proton*" | sort -r); do
                    if [[ -d "${candidate}" && -f "${candidate}/proton" && -x "${candidate}/proton" ]]; then
                        proton_path="${candidate}"
                        return 0
                    fi
                done
            done
        fi
    fi

    if [[ -z "${proton_path}" ]]; then
        return 1
    fi
    echo "${proton_path}"
}

# Install dependencies using Winetricks into the prefix
install_dependencies() {
    local deps="${1}"
    if ! command -v winetricks >/dev/null 2>&1; then
        echo -e "${RED}Error: Winetricks is not installed${NC}" >&2
        return 1
    fi
    echo -e "${YELLOW}Installing dependencies '${deps}' into prefix ${WINEPREFIX}${NC}"
    winetricks --unattended ${deps}
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}Error: Dependency installation failed${NC}" >&2
        return 1
    fi
    echo -e "${GREEN}Dependencies installed successfully${NC}"
}

# ----------------------------------------------------------------------------
# Main Execution Logic
# ----------------------------------------------------------------------------

# Load configurable variables (allow overrides via env)
COMMON_COMPATDATA="${COMMON_COMPATDATA:-${DEFAULT_COMMON_COMPATDATA}}"
PROTON_TOOLS_DIR="${PROTON_TOOLS_DIR:-${DEFAULT_PROTON_TOOLS_DIR}}"
PROTON_OFFICIAL_DIR="${PROTON_OFFICIAL_DIR:-${DEFAULT_PROTON_OFFICIAL_DIR}}"
STEAM_DIR="${STEAM_DIR:-${DEFAULT_STEAM_DIR}}"
PROTON_VERSION="${PROTON_VERSION:-${DEFAULT_PROTON_VERSION}}"

# Parse command-line arguments
DEBUG_MODE=false
INSTALL_DEPS=""

while [[ $# -gt 0 ]]; do
    case "${1}" in
        -v|--version)
            PROTON_VERSION="${2}"
            shift 2
            ;;
        -l|--list-versions)
            list_proton_versions
            exit 0
            ;;
        -d|--debug)
            DEBUG_MODE=true
            shift
            ;;
        -i|--install-deps)
            INSTALL_DEPS="${2}"
            shift 2
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        -*)
            echo -e "${RED}Error: Unknown option ${1}${NC}" >&2
            print_help
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

# Validate executable
if [[ $# -eq 0 ]]; then
    echo -e "${RED}Error: No executable specified${NC}" >&2
    print_help
    exit 1
fi

EXECUTABLE="${1}"
shift

# Resolve absolute path
EXECUTABLE=$(realpath -m "${EXECUTABLE}" 2>/dev/null || echo "${EXECUTABLE}")

if [[ ! -f "${EXECUTABLE}" ]]; then
    echo -e "${RED}Error: File '${EXECUTABLE}' not found${NC}" >&2
    exit 1
fi

# Skip executable check for .exe files
if [[ ! "${EXECUTABLE}" =~ \.exe$ ]] && [[ ! -x "${EXECUTABLE}" ]]; then
    echo -e "${RED}Error: File '${EXECUTABLE}' is not executable (non-.exe file)${NC}" >&2
    exit 1
fi

# Locate Proton path
PROTON_PATH=$(find_proton_path "${PROTON_VERSION}")
if [[ $? -ne 0 ]]; then
    echo -e "${RED}Error: No Proton installation found${NC}" >&2
    list_proton_versions
    exit 1
fi

PROTON_VERSION=$(basename "${PROTON_PATH}")
SANITIZED_VERSION=$(echo "${PROTON_VERSION}" | tr ' ' '-')

# Setup prefix
PROTON_PREFIX="${COMMON_COMPATDATA}/${SANITIZED_VERSION}"
mkdir -p "${PROTON_PREFIX}"
export WINEPREFIX="${PROTON_PREFIX}/pfx"

# Install dependencies if requested
if [[ -n "${INSTALL_DEPS}" ]]; then
    install_dependencies "${INSTALL_DEPS}" || exit 1
fi

# Version tracking
echo "${PROTON_VERSION}" > "${PROTON_PREFIX}/version.txt"

# Debug mode configuration
if [[ "${DEBUG_MODE}" == true ]]; then
    export PROTON_DEBUG=1
    export PROTON_LOG=1
    export WINEDEBUG="err+all"
    LOG_FILE="${PROTON_PREFIX}/proton.log"
    echo -e "${YELLOW}Debug mode enabled: Logging to ${LOG_FILE}${NC}"
fi

# Optional stability settings (uncomment or customize as needed)
# export PROTON_NO_ESYNC=1
# export PROTON_NO_FSYNC=1

# Display runtime information
echo -e "${GREEN}Running:${NC} ${EXECUTABLE}"
echo -e "${GREEN}Proton Version:${NC} ${PROTON_VERSION}"
echo -e "${GREEN}Prefix:${NC} ${PROTON_PREFIX}"
echo

# Environment setup
export STEAM_COMPAT_DATA_PATH="${PROTON_PREFIX}"
export STEAM_COMPAT_CLIENT_INSTALL_PATH="${STEAM_DIR}"
export PROTONFIXES_DISABLE_UNITTEST_CHECK=1
export STEAM_COMPAT_APP_ID=0  # Placeholder for compatibility fixes

mkdir -p "${STEAM_DIR}/config"
mkdir -p "${STEAM_DIR}/logs"
mkdir -p "${PROTON_PREFIX}/pfx"

# Symlink workaround for official Proton variants
if [[ "${PROTON_VERSION}" == *"Experimental"* || "${PROTON_VERSION}" == *"Beta"* ]]; then
    TEMP_SYMLINK="${PROTON_OFFICIAL_DIR}/Proton"
    ln -sfn "${PROTON_PATH}" "${TEMP_SYMLINK}" 2>/dev/null
    trap "rm -f '${TEMP_SYMLINK}'" EXIT
    echo -e "${YELLOW}Created temporary symlink for official Proton compatibility${NC}"
fi

# Determine run command with fallbacks
if [[ -f "${PROTON_PATH}/proton" && -x "${PROTON_PATH}/proton" ]]; then
    PROTON_RUN_CMD=("${PROTON_PATH}/proton" "run")
elif [[ -f "${PROTON_PATH}/dist/bin/wine64" && -x "${PROTON_PATH}/dist/bin/wine64" ]]; then
    echo -e "${YELLOW}Using fallback: dist/bin/wine64${NC}"
    PROTON_RUN_CMD=("${PROTON_PATH}/dist/bin/wine64")
elif [[ -f "${PROTON_PATH}/dist/bin/wine" && -x "${PROTON_PATH}/dist/bin/wine" ]]; then
    echo -e "${YELLOW}Using fallback: dist/bin/wine${NC}"
    PROTON_RUN_CMD=("${PROTON_PATH}/dist/bin/wine")
else
    echo -e "${RED}Error: No valid run command found in ${PROTON_PATH}${NC}" >&2
    exit 1
fi

# Execute with optional gamemoderun and logging
if command -v gamemoderun >/dev/null 2>&1; then
    echo -e "${YELLOW}Using gamemoderun for performance optimization${NC}"
    if [[ "${DEBUG_MODE}" == true ]]; then
        gamemoderun "${PROTON_RUN_CMD[@]}" "${EXECUTABLE}" "${@}" 2>&1 | tee -a "${LOG_FILE}"
    else
        gamemoderun "${PROTON_RUN_CMD[@]}" "${EXECUTABLE}" "${@}"
    fi
else
    if [[ "${DEBUG_MODE}" == true ]]; then
        "${PROTON_RUN_CMD[@]}" "${EXECUTABLE}" "${@}" 2>&1 | tee -a "${LOG_FILE}"
    else
        "${PROTON_RUN_CMD[@]}" "${EXECUTABLE}" "${@}"
    fi
fi