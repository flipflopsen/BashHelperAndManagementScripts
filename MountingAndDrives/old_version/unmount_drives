#!/bin/bash

SCRIPT_DIR=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)
CONFIG_FILE="$SCRIPT_DIR/drive_configuration.json"

if [ "$(id -u)" != "0" ]; then
    echo "Re-running the script under root..."
    exec sudo bash "$0" "$@"
fi

USERNAME=$(jq -r '.Username' $CONFIG_FILE)
MOUNT_POINT_BASE=$(jq -r '.MountPointBaseDir' $CONFIG_FILE)
LINK_BASE_FOLDER=$(jq -r '.DeviceLinkBaseFolder' $CONFIG_FILE)
DEVICES=$(jq -c '.Devices[]' $CONFIG_FILE)

echo "Starting unmounting process..."

echo "$DEVICES" | jq -c '.' | while read -r device; do
    IDENTIFIER=$(echo $device | jq -r '.Identifier')
    MOUNT_POINT="$MOUNT_POINT_BASE/$USERNAME/$IDENTIFIER"
    BIND_MOUNT="$MOUNT_POINT.bind"
    
    echo "Attempting to unmount $BIND_MOUNT..."
    umount "$BIND_MOUNT" 2>/dev/null || echo "Warning: Failed to unmount $BIND_MOUNT. It may be in use."
    rmdir "$BIND_MOUNT" 2>/dev/null || echo "Warning: Failed to remove $BIND_MOUNT. Directory might not be empty."

    echo "Attempting to unmount $MOUNT_POINT..."
    for attempt in {1..3}; do
        umount "$MOUNT_POINT" 2>/dev/null && echo "Unmounted successfully on attempt $attempt." && break
        echo "Attempt $attempt to unmount $MOUNT_POINT failed. Retrying..."
        lsof +f -- $MOUNT_POINT
        sleep 1
    done
    
    rmdir "$MOUNT_POINT" 2>/dev/null || echo "Warning: $MOUNT_POINT is not empty, not removing."

    SPECIAL_PERMS=$(echo $device | jq -r '.SpecialPermissionMounting')
    echo "Checked special permissions for $IDENTIFIER: $SPECIAL_PERMS"
done

echo "Removing all symbolic links in $LINK_BASE_FOLDER..."
find "$LINK_BASE_FOLDER" -type l \( ! -exec test -e {} \; -or -exec echo Removing {} \; -exec rm {} + \)

echo "All drives unmounted and links removed."
